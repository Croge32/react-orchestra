exports[`test Note handles onMouseDown and onMouseUp correctly 1`] = `
<div
  className=" "
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note handles onMouseDown and onMouseUp correctly 2`] = `
<div
  className=" ro-note-playing"
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note handles onMouseDown and onMouseUp correctly 3`] = `
<div
  className=" ro-note-playing"
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note handles onTouchStart and onTouchEnd correctly 1`] = `
<div
  className=" "
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note handles onTouchStart and onTouchEnd correctly 2`] = `
<div
  className=" ro-note-playing"
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note handles onTouchStart and onTouchEnd correctly 3`] = `
<div
  className=" ro-note-playing"
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note renders correctly 1`] = `
<div
  className=" "
  onMouseDown={[Function]}
  onMouseUp={[Function]}
  onTouchEnd={[Function]}
  onTouchStart={[Function]}>
  <div>
    Note container
  </div>
</div>
`;

exports[`test Note renders correctly 2`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className=" "
    onMouseDown={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}>
    <div>
        Note container
    </div>
</div>,
  "nodes": Array [
    <div
      className=" "
      onMouseDown={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchStart={[Function]}>
      <div>
            Note container
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance":  {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Note
        instrumentName="acoustic_grand_piano"
        name="A3"
        onNoteLoaded={[Function]}
        play={false}>
        <div>
                Note container
        </div>
</Note>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Note {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onClickStart": [Function],
        "playingBuffers": Array [],
        "props": Object {
          "children": <div>
            Note container
</div>,
          "instrumentName": "acoustic_grand_piano",
          "name": "A3",
          "onNoteLoaded": [Function],
          "play": false,
        },
        "refs": Object {},
        "startPlayingNote": [Function],
        "state": Object {
          "isLoaded": true,
          "isPlaying": false,
        },
        "stopPlayingNote": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className=" "
          onMouseDown={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}>
          <div>
                    Note container
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className=" "
          onMouseDown={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}>
          <div>
                    Note container
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Note
    instrumentName="acoustic_grand_piano"
    name="A3"
    onNoteLoaded={[Function]}
    play={false}>
    <div>
        Note container
    </div>
</Note>,
}
`;

exports[`test Note renders correctly 3`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className=" ro-note-playing"
    onMouseDown={[Function]}
    onMouseUp={[Function]}
    onTouchEnd={[Function]}
    onTouchStart={[Function]}>
    <div>
        Note container
    </div>
</div>,
  "nodes": Array [
    <div
      className=" ro-note-playing"
      onMouseDown={[Function]}
      onMouseUp={[Function]}
      onTouchEnd={[Function]}
      onTouchStart={[Function]}>
      <div>
            Note container
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance":  {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Note
        instrumentName="acoustic_grand_piano"
        name="A3"
        onNoteLoaded={[Function]}
        play={true}>
        <div>
                Note container
        </div>
</Note>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Note {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onClickStart": [Function],
        "playingBuffers": Array [],
        "props": Object {
          "children": <div>
            Note container
</div>,
          "instrumentName": "acoustic_grand_piano",
          "name": "A3",
          "onNoteLoaded": [Function],
          "play": true,
        },
        "refs": Object {},
        "startPlayingNote": [Function],
        "state": Object {
          "isLoaded": true,
          "isPlaying": true,
        },
        "stopPlayingNote": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className=" ro-note-playing"
          onMouseDown={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}>
          <div>
                    Note container
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className=" ro-note-playing"
          onMouseDown={[Function]}
          onMouseUp={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}>
          <div>
                    Note container
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Note
    instrumentName="acoustic_grand_piano"
    name="A3"
    onNoteLoaded={[Function]}
    play={true}>
    <div>
        Note container
    </div>
</Note>,
}
`;
